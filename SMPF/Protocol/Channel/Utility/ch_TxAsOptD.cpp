Line 512: ###[AS] Check default mode due to algorithm search fail
Line 515: ###[AS] GetAsAlgoFromNvTbl: AsInfoIndex(%d) algorithm(%d) RSI(%d) RfBand(%d)
Line 516: ###[AS] AS_INFO: RegC_Tx (%3d/%3d/%3d/%3d)
Line 517: ###[AS] AS_INFO: RegC_Rx (%3d/%3d/%3d/%3d)
Line 518: ###[AS] AS_INFO: RegH    (%3d/%3d/%3d/%3d)
Line 551: ###[AS] Select AS Algorithm for SA mode
Line 617: ###[AS] Select AS Algorithm for DLCA mode
Line 641: ###[AS] Select AS Algorithm for ENDC mode
Line 649: ###[AS] EndcLteBandList(%d), cc_idx(%d)
Line 683: ###[AS] Band count mismatch!! info_idx(%d), NumLteRfBand(%d) NumNrRfBand(%d)
Line 767: ###[AS] Select AS Algorithm for ULMIMO mode
Line 821: ###[AS] Select AS Algorithm for ULCA mode
Line 868: ###[AS] GetAsModeFromNvTbl: AsMode(%d)
Line 908: ###[AS] NumNrRfBand(%d) Rf_Band (2/2/2/2)(%8d)
Line 945: ###[AS] GetAsBandInfo:: Invalid NR TxPathType. NrBand(%d), TxPathType(%d)
Line 977: ###[AS] ProcUpdateAntInfo: AsDefaultMode(%d) AsAlgoFromAsInfo(%d)
Line 989: ###[AS] ProcUpdateAntInfo: ResolveConflictRequired. NrRfBand(%d), LteTargetTxAnt(%d) IsAsRestrictedbyLte(%d)
Line 999: ###[AS] ProcUpdateAntInfo: IsAsRestrictedbyLte(%d) AsDefaultMode(%d)
Line 1066: ###[AS] GetAsCaPossibleAntSel: AsCaPossibleAntSel(%d) NumActiveRfband(%d) ActiveRfband(2/2/2/2)(%d) CaRestrictTable band(2/2/2/2)(%d)
Line 1096: ###[AS] GetAsEndcPossibleAntSel: NumRegAntConfigTable(%d) NumRegSwTable(%d) LteBandGroup(%d) LteBand(%d) NrBandGroup(%d) NrBand(%d) LteAsStatus(%d)
Line 1098: ###[AS] GetAsEndcPossibleAntSel: LteTxPathType(%d) NrTxPathType(%d) - 0:TX_PATH_MAIN 1:TX_PATH_SUB 2: TX_PATH_NOT_ALLOC
Line 1105: ###[AS] GetAsEndcPossibleAntSel: ant_config_table_idx(%d) BandInfo(%d) IsSubAnt(%d) AntNum(%d %d %d %d)
Line 1153: ###[AS] GetAsEndcPossibleAntSel: LteBandIndex(%d) NrBandIndex(%d) AsEndcPossibleAntSel(%d)
Line 1161: ###[AS] GetAsEndcPossibleAntSel: sw_table_idx(%d) LteBand(%d) NrBand(%d) PossibleAntSelForNr(%d)
Line 1166: ###[AS] GetAsEndcPossibleAntSel: RegSwRestrict[%d] LteBand(%d) NrBand(%d) AsEndcPossibleAntSel(%d)
Line 1203: ###[AS] GetNrPhysicalAntenna: not available update antenna info. rf_path(%d), band(%d)
Line 1219: ###[AS] GetNrPhysicalAntenna: NumRegAntConfigTable(%d), NrBandGroup[0]=(%d), NrBand[0]=(%d), TxPathType(%d), RegTestMode(%d), rf_path(%d), cur_tx_mode(%d)
Line 1226: ###[AS] GetNrPhysicalAntenna: ant_config_table_idx(%d) BandInfo(%d) IsSubAnt(%d) AntNum(%d %d %d %d)
Line 1249: ###[AS] GetNrPhysicalAntenna: NrBandIndex(%d) NrPhysicalAntenna(%d)
Line 1286: ###[AS] ResolveUlCaAntennaConflict: BandList(pcell3/scell3: %06d), BandGroup(pcell2/scell2: %04d), AntCfgBand(pcell3/scell3: %06d), key(pcell4/scell4: 0x%08X), NumNrAntMap(%d)
Line 1296: ###[AS] ResolveUlCaAntennaConflict : PCell ANT(0x%X/0x%X/0x%X/0x%X), target_ant_idx(%d), restrict_table_idx(%d)
Line 1297: ###[AS] ResolveUlCaAntennaConflict : SCell ANT(0x%X/0x%X/0x%X/0x%X), target_ant_idx(%d), restrict_table_idx(%d)
Line 1303: ###[AS] ResolveUlCaAntennaConflict. final: Pcell(as_event:%d, physical ant:%d), SCell(as_event:%d, physical ant:%d)
Line 1309: ###[AS] No AntMap
Line 1327: ###[AS] SetIsAsRestrictedbyL1InfoReq: AsPossibleAntSel(%d)
Line 1361: ###[AS] SetIsAsRestrictedbyL1InfoReq1Tx: AsPossibleAntSel(%d), IsAsRestrictedbyL1InfoReq(%d)
Line 1418: ###[AS] SetIsAsRestrictedbyL1InfoReqUlCaTx: AntConfig(%d), IsAsRestrictedbyL1InfoReq(%d)
Line 1441: ###[AS] SetIsAsRestrictedbyL1InfoReq2Tx: AsPossibleAntSel(%d), IsAsRestrictedbyL1InfoReq(%d)
Line 1463: ###[AS] SetUlCaTxAntbyL1InfoReq: IsAsRuning(%d), PCell(%d), SCell(%d)
Line 1499: ###[AS] SetTxAnt: IsAsRuning(%d) TargetTxAnt(%d)
Line 1548: ###[AS] Select1Tx: CurAntNum(%d) CurAntIdx(%d) AntOffset(%d) Rsrp[CurAntNum](%d) Rsrp[CurAntIdx](%d) Pmax[CurAntIdx](%d), Pmax[CurAntNum](%d)
Line 1553: ###[AS] Select1Tx: CurAnt(%d) Rsrp(%d/%d/%d/%d) CurAntMaxVal(%d) AsBitmap(0x%x)
Line 1568: ###[AS] ant_idx(%d) AntNum(%d) Rsrp(%d) RegC_Tx(%d) RegC_Rx(%d) RegH(%d) RegMtpl(%d)
Line 1591: ###[AS] Update Best ant_idx(%d > %d), AntNum(%d):(%d > %d : (Candidate MaxVal:Rsrp+Pmax+RegC_Rx) > (Current MaxVal))
Line 1603: ###[AS] Select Antenna. AsEvent{Prev(%d), New(%d)}, Value(%d/%d) Diff(%d) domain_type(%d) RfBand(%d)
Line 1640: ###[AS] Select2Tx: CurAsEvent(%d: %s, %s), Rsrp(%d/%d/%d/%d)
Line 1661: ###[AS] ant_idx(%d), Current MaxVal(%d) = (Rsrp(%d) + RegMtpl(%d) + RegC_Tx(%d)), RegC_Rx(%d), RegH(%d)
Line 1663: ###[AS] ant_idx(%d), Candidate MaxVal(%d) = (Rsrp(%d) + RegMtpl(%d) + RegC_Rx(%d)), RegC_Tx(%d), RegH(%d)
Line 1679: ###[AS] Update Best ant_idx(%d > %d), (%d > %d : (Candidate MaxVal) > (Current MaxVal + RegH))
Line 1695: ###[AS] unavaiable Tx AS: invalid AS combination index, PathMaxIdx(Main/Sub)(%d/%d) CombIdx(0x%x)
Line 1702: ###[AS] Select Antenna. AsEvent{Prev(%d), New(%d)} : Main/Sub(%s , %s), domain_type(%d) RfBand(%d)
Line 1757: ###[AS] SelectUlCaTx: [PCell] CurAnt(%d) Rsrp(%d/%d/%d/%d) CurAntMaxVal(%d) PcellRfBand(%d)
Line 1765: ###[AS] ant_idx(%d) AntNum(%d) Rsrp(%d) RegC_Tx(%d) RegC_Rx(%d) RegH(%d) PowforTxAS(%d)
Line 1792: ###[AS] Update Best ant_idx(%d > %d), AntNum(%d):(%d > %d : (Candidate MaxVal:Rsrp+Pmax+RegC_Rx) > (Current MaxVal))
Line 1824: ###[AS] SelectUlCaTx: [SCell] CurAnt(%d) Rsrp(%d/%d/%d/%d) CurAntMaxVal(%d) ScellRfBand(%d)
Line 1832: ###[AS] ant_idx(%d) AntNum(%d) Rsrp(%d) RegC_Tx(%d) RegC_Rx(%d) RegH(%d) PowforTxAS(%d)
Line 1852: ###[AS] Update Best ant_idx(%d > %d), AntNum(%d):(%d > %d : (Candidate MaxVal:Rsrp+Pmax+RegC_Rx) > (Current MaxVal))
Line 1865: ###[AS] Discard Scell switch. idx(target/current: %d/%d) Maxval(%d) < current(%d), RegH(%d)
Line 1871: ###[AS] Discard Pcell switch. idx(target/current: %d/%d) Maxval(%d) < current(%d), RegH(%d)
Line 1891: ###[AS] Select Antenna. ULCA(SCell) AsEvent{Prev(%d), New(%d)} : PCell/SCell(%s , %s)
Line 1902: ###[AS] Select Antenna. ULCA(PCell) AsEvent{Prev(%d), New(%d)} : PCell/SCell(%s , %s)
Line 1942: ###[AS] No RF Path to support AS in RfBand(%d)
Line 1984: ###[AS] GetTASPowerForTxAS:: Pmax(%d %d %d %d)
Line 1991: ###[AS] GetMtplForEachAnt:: Pmax(%d %d)
Line 1996: ###[AS] GetAntThreshold: CurrTxAnt(%d) ThresholdCalcTxPath(%d) ThresholdCalcAntOffset(%d)
Line 1999: ###[AS] TxAntSwitch::GetAntThreshold Pmax0(%d) Pmax1(%d) C00(%d), H0(%d), C11(%d), AntThreshold_cfg0(%d)
Line 2002: ###[AS] TxAntSwitch::GetAntThreshold Pmax0(%d) Pmax1(%d) C10(%d), H1(%d), C01(%d), AntThreshold_cfg1(%d)
Line 2038: ###[AS] SendL1AsOptMDmInfo prevtxAntennaNum(%d) txAntennaNum(%d) asConfig(%d) mtpl(%d)
